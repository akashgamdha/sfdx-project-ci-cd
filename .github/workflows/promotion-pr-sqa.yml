name: Auto promotion PR creation and validation for SQA
on:
      pull_request:
            types: [opened]
            branches:
                  - SQA
jobs:
      create_promotion_pr:
            runs-on: ubuntu-latest
            if: "!startsWith(github.event.pull_request.head.ref, 'gh-pipeline')"
            steps:
                - name: Checkout repository
                  uses: actions/checkout@v4
                  with:
                        fetch-depth: 0

                - name: Set up GitHub CLI
                  run: |
                        sudo apt update -y
                        sudo apt install gh -y
                  
                - name: Run pipeline creation script
                  env:
                        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                        SOURCE_BRANCH: ${{ github.event.pull_request.head.ref }}
                        PR_NUMBER: ${{ github.event.pull_request.number }}
                        TARGET_BRANCH: "SQA"
                        PIPELINE_BRANCH: "gh-pipeline/${{ github.event.pull_request.head.ref }}_-_SQA"
                  run: |
                        #!/bin/bash

                        set -e
                        
                        # Get the necessary environment variables
                        SOURCE_BRANCH=$SOURCE_BRANCH
                        TARGET_BRANCH=$TARGET_BRANCH
                        PIPELINE_BRANCH=$PIPELINE_BRANCH
                        PR_NUMBER=$PR_NUMBER
                        
                        echo "environment variables are initialized..."
                        
                        # Configure git
                        git config --global user.email "akash.gamdha@mckesson.com"
                        git config --global user.name "akashgamdha"
                        echo "Git Configured..."
                        
                        # Exit if source branch starts with 'gh-pipeline'
                        if [[ $SOURCE_BRANCH == gh-pipeline* ]]; then
                          echo "Source branch starts with 'gh-pipeline'. Skipping jobs."
                          exit 0
                        fi
                        
                        echo "Checking if pipeline exists..."
                        # Check if the pipeline branch exists
                        if git rev-parse --verify --quiet "origin/${PIPELINE_BRANCH}"; then
                          echo "Pipeline branch exists. Merging PR source branch into pipeline branch..."
                          git checkout "${PIPELINE_BRANCH}"
                          echo "Checked out existing pipeline branch"
                          git pull origin "${PIPELINE_BRANCH}"
                          echo "Pulled existing pipeline branch"
                          git merge "origin/${SOURCE_BRANCH}" --no-edit
                          echo "Merged source branch in existing pipeline branch"
                          git push origin "${PIPELINE_BRANCH}"
                          echo "Pushed existing pipeline branch"
                        else
                          echo "Pipeline branch does not exist. Creating pipeline branch from source branch..."
                          git checkout -b "${PIPELINE_BRANCH}" "origin/${SOURCE_BRANCH}"
                          echo "Checked out new pipeline branch"
                          git push origin "${PIPELINE_BRANCH}"
                          echo "Pushed new pipeline branch"
                        fi

                        echo "Checking if PR exists"
                        # Check if a PR exists with the pipeline branch as source
                        EXISTING_PR=$(gh pr list --state open --base "${TARGET_BRANCH}" --head "${PIPELINE_BRANCH}" --json number --jq '.[].number')
                        
                        if [ -z "$EXISTING_PR" ]; then
                          echo "No existing PR from pipeline branch. Creating a new PR..."
                          
                          NEW_PR=$(gh pr create --base "${TARGET_BRANCH}" --head "${PIPELINE_BRANCH}" --title "Pipeline PR from ${PIPELINE_BRANCH} to ${TARGET_BRANCH}" --body "This PR is created for the pipeline of original PR: #${PR_NUMBER}" --json number --jq '.number')
                          
                          echo "Pipeline PR created: #${NEW_PR}"
                        
                          # Add a comment to the original PR
                          gh pr comment "${PR_NUMBER}" --body "A new PR was created for pipeline: #${NEW_PR}"
                        
                          # Close the original PR
                          gh pr close "${PR_NUMBER}"
                        else
                          echo "Pipeline PR already exists: #${EXISTING_PR}"
                        fi
